name: Intelligent AI-Driven Issue Dispatcher

on:
  issues:
    types: [opened]  # Only trigger on issue creation initially
  issue_comment:
    types: [created]  # Only trigger on new comments
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: false
        type: string
      force_analysis:
        description: 'Force re-analysis even if already processed'
        required: false
        type: boolean
        default: false

jobs:
  intelligent_dispatch:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'issue_comment' && github.event.action == 'created')
    
    permissions:
      issues: write
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python with cache
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'analyzer-core/requirements.txt'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('analyzer-core/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/lib/python3.11/site-packages
            ~/.local/bin
          key: ${{ runner.os }}-python-packages-${{ hashFiles('analyzer-core/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-packages-

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install dependencies with cache optimization
        run: |
          echo "🔧 Installing Python dependencies with caching..."
          python -m pip install --upgrade pip
          
          # Check if requirements.txt exists and install from it
          if [ -f analyzer-core/requirements.txt ]; then
            echo "📦 Installing from requirements.txt..."
            pip install --user -r analyzer-core/requirements.txt
          else
            echo "📦 Installing fallback dependencies..."
            # Fallback to manual installation with --user flag for better caching
            pip install --user azure-identity requests
            pip install --user langchain_openai langchain_core
            pip install --user chromadb
            pip install --user aiohttp pydantic
          fi
          echo "✅ Dependencies installed successfully"      - name: Verify environment and cache status
          echo "🔍 Environment verification:"
          echo "Python version: $(python --version)"
          echo "Pip cache dir: $(pip cache dir)"
          echo "Python packages location:"
          ls -la ~/.local/lib/python3.11/site-packages/ 2>/dev/null | head -10 || echo "  No cached packages found"

      - name: Run Intelligent AI Dispatcher
        id: intelligent_dispatch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          ISSUE_NUMBER: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.issue_number || (github.event_name == 'issue_comment' && github.event.issue.number) || github.event.issue.number || '' }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_FULL_NAME: ${{ github.repository }}
          SENDER_LOGIN: ${{ github.event.sender.login }}
          SENDER_TYPE: ${{ github.event.sender.type }}
          FORCE_ANALYSIS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force_analysis || 'false' }}
          # Comment-specific environment variables
          COMMENT_ID: ${{ github.event.comment.id || '' }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login || '' }}
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
          # GitHub event payload path for additional context
          GITHUB_EVENT_PATH: ${{ github.event_path }}
          # Azure OpenAI Configuration
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
          # Optional: OpenAI fallback
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🚀 Starting Intelligent AI-Driven Issue Analysis..."
          echo "📋 Issue Number: $ISSUE_NUMBER"
          echo "🎯 Event: $GITHUB_EVENT_NAME ($GITHUB_EVENT_ACTION)"
          echo "📦 Repository: $REPO_FULL_NAME"
          echo "👤 Sender: $SENDER_LOGIN"
          echo "💬 Comment Author: $COMMENT_AUTHOR"
          echo "🧠 Using LLM-driven intelligent decision making system..."
          echo "🔧 This system uses smart trigger logic to avoid bot loops"
          echo "🎯 Similar to GitHub Copilot - AI decides what tools to use"
          echo ""
          # Add Python user site-packages to PATH for cached packages
          export PATH="$HOME/.local/bin:$PATH"
          export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
          python scripts/intelligent_dispatch_action.py

      - name: Upload Intelligent Analysis Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: intelligent-dispatch-results-${{ github.run_id }}
          path: |
            intelligent_dispatch_results.json
            *.log
          retention-days: 30
